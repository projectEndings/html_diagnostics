<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="Build HTML Diagnostics" default="all">
  
  
  
  
    <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
    
    <!--  This is taken with thanks from:
      http://stackoverflow.com/questions/4696176/using-ant-how-do-i-open-a-file-in-a-browser -->
    <scriptdef name="open" language="javascript">
        <attribute name="file" />
        <![CDATA[
        var location = "file://"+attributes.get("file").toString().replaceAll("\\\\","/");
        location = java.net.URLEncoder.encode(location, "UTF-8");
        location = location.toString().replaceAll("%3A",":");
        location = location.toString().replaceAll("%2F","/");
        var uriLocation = java.net.URI.create(location);
        var desktop = java.awt.Desktop.getDesktop();
        desktop.browse(uriLocation);
    ]]>
    </scriptdef>
    
    
    <property name="projectDir" value=""/>
  
    <property name="echo.separator" value="*********************************************"/>
    
    
    <!--USER SET PROPERTIES-->
    <property name="byDoc" value="true"/>
    
    
    
    <!--NOTE that this is a pattern, which by
        default is
        *htm* = xhtml, htm, html-->
    <property name="suffix" value="*htm*"/>
    <property name="excludePattern" value=""/>
    
    <!--The exceptions document; you can make your own or use the provided one
        whichever works-->
    <property name="exceptionsDoc" value="${basedir}/utilities/EXCEPTIONS"/>
    
    <tstamp>
        <format property="date" pattern="yyyy-MM-dd" locale="en"/>
    </tstamp>
    
    <!--CONDITIONS-->
    <condition property="isWindows" value="true">
        <os family="windows"/>
    </condition>
    
    <condition property="isUnix" value="true">
        <os family="unix" />
    </condition>
    
    <condition property="useExclude">
        <not>
            <equals arg1="${excludePattern}" arg2=""/>
        </not>
    </condition>
    
    <condition property="promptForFile">
        <equals arg1="${projectDir}" arg2=""/>
    </condition>
    
    <fileset id="docsToCheck" dir="${projectDirFull}">
        <include name="**.${suffix}"/>
        <include name="**/**.${suffix}"/>
        <exclude name="**/google**.html"/>
    </fileset>
    
    <fileset id="systemFiles" dir="${projectDirFull}">
        <include name="**"/>
        <exclude name="**.${suffix}"/>
        <exclude name="**/**.${suffix}"/>
    </fileset>
    
    <target name="clean">
        <delete dir="${outputDir}"/>
    </target>
  
    <target name="setup" depends="getDirectory, convertForUnix, convertForWindows">
        <description>
            TARGET: setup
            This task creates a diagnostics directory in the projectFolder.
        </description>
        
        <echo message="Input: ${projectDir}"/>
        <echo message="Input after conversion: ${projectDirFull}"/>
        <echo message="Output dir: ${outputDir}"/>
        
        <fail message="Aborting. Directory selection was cancelled.">
            <condition>
                <equals arg1="${projectDirFull}" arg2=""/>
            </condition>
        </fail>
        <fail message="Project directory not found. Please check input: ${projectDir}.">
            <condition>
                <not>
                    <available file="${projectDirFull}" type="dir"/>
                </not>
            </condition>
        </fail>
        
        
        
        <echo message="Executing diagnostics on directory ${projectDirFull}"/>
        <echo message="Creating diagnostics directory: ${outputDir}"/>
        <mkdir dir="${outputDir}"/>
    </target>
    
    <target name="getDirectory" if="${promptForFile}">
        <script language="javascript">
            <![CDATA[
                 //Create a new Jframe
                var frame = new javax.swing.JFrame();
                
                //Set it on top
                frame.setAlwaysOnTop( true );
                
                //Set location
                frame.setLocationByPlatform( true );
                frame.setLocationRelativeTo(null);
                
                //Close it when it closes
                frame.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
                
                //No decoration
                frame.setUndecorated(true);
                
                //Display it
                frame.pack();
                frame.setVisible(true);
                
                //Create new file chooser
                var chooser = new javax.swing.JFileChooser();
                
                //Set the dialog title
                chooser.setDialogTitle("Choose the directory containing your TEI files.");
                
                // Choose directories only
                chooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
                
                // If a directory is chosen, then set the property to that
                if (chooser.showOpenDialog(frame) == javax.swing.JFileChooser.APPROVE_OPTION) { 
                    dir = chooser.getSelectedFile();
                	project.setProperty('projectDir', dir);
                }
                else{
                    // Otherwise, break
                    javax.swing.JOptionPane.showMessageDialog(frame, "Process cancelled. Aborting.");
                    throw "Process cancelled. Aborting!";
                }
            ]]>
        </script>
        <echo>You chose this directory: ${projectDir}.</echo>
    </target>
    
    
    <target name="convertForWindows" if="${isWindows}">
        <pathconvert property="projectDirFull" targetos="windows">
            <path path="${projectDir}"/>
            <identitymapper/>
        </pathconvert>
        <property name="outputDir" value="${projectDirFull}\..\diagnostics_${date}"/>
    </target>
    
    <target name="convertForUnix" if="${isUnix}">
        <pathconvert property="projectDirFull" targetos="unix">
            <path path="${projectDir}"/>
            <identitymapper/>
        </pathconvert>
        <property name="outputDir" value="${projectDirFull}/../diagnostics_${date}"/>
    </target>
    
    
    <target name="createSystemXml" depends="setup">
            <description>This target creates and outputs the 
                list of documents that are being transformed (i.e. the
                HTM* fileset) and the list of files that are available in
                the project folder.</description>
            <echo message="Getting list of files in the file system..."/>
            <echo message="${echo.separator}"/>
            <pathconvert pathsep="${line.separator}"
                property="my.files">
                <path>
                    <fileset dir="${projectDir}">
                        <include name="**/**"/>
                    </fileset>
                </path>
            </pathconvert>
            <echo file="${outputDir}/system_files.txt" message="${my.files}"/>
        <java classname="net.sf.saxon.Transform" classpath="utilities/saxon9he.jar" fork="true">
            <jvmarg value="-Xmx1024m"/>
            <arg value="-s:xsl/create_system_xml.xsl"/>
            <arg value="-xsl:xsl/create_system_xml.xsl"/>
            <arg value="-o:${outputDir}/system_files.xml"/>
            <arg value="projectDirectory=${projectDirFull}"/>
            <arg value="outputDir=${outputDir}"/>
            <arg value="currDate=${date}"/>
            <arg value="line.separator=${line.separator}"/>
            <arg value="uniques=${outputDir}/unique.txt"/>
            <arg value="suffix=${suffix}"/>
            <arg value="fileList=${outputDir}/systemFiles.txt"/>
            <arg value="--suppressXsltNamespaceCheck:on"/>
        </java>
    </target>
    
    
    <target name="index" depends="setup">
        <echo message="${echo.separator}"/>
        <echo message="First, index all references and ids..."/>
        <echo message="${echo.separator}"/>
        <xslt style="xsl/create_indexes.xsl" useimplicitfileset="no" destdir="${outputDir}/tmpLinksTxt" classpath="utilities/saxon9he.jar" reloadstylesheet="true">
            <factory name="net.sf.saxon.TransformerFactoryImpl"/>
            <param name="projectDirectory" expression="${projectDirFull}"/>
            <param name="outputDir" expression="${outputDir}"/>
            <param name="line.separator" expression="${line.separator}"/>
            <param name="suffix" expression="${suffix}"/>
            <fileset dir="${projectDirFull}">
                <include name="**.${suffix}"/>
                <include name="**/**.${suffix}"/>
                <exclude if="${useExclude}" name="${excludePattern}"/>
            </fileset>
        </xslt>
    </target>
    
    <target name="checkInternal" depends="setup">
        <java classname="net.sf.saxon.Transform" classpath="utilities/saxon9he.jar" fork="true">
            <jvmarg value="-Xmx1024m"/>
            <arg value="-s:xsl/check_internal_refs.xsl"/>
            <arg value="-xsl:xsl/check_internal_refs.xsl"/>
            <arg value="-o:${outputDir}/system_files.xml"/>
            <arg value="projectDirectory=${projectDirFull}"/>
            <arg value="outputDir=${outputDir}"/>
            <arg value="line.separator=${line.separator}"/>
            <arg value="suffix=${suffix}"/>
            <arg value="--suppressXsltNamespaceCheck:on"/>
        </java>
    </target>
    
    
    <target name="checkRefs" depends="setup">
        <description>This target uses an XSLT to go through the list of unique
            references and see if that line matches another line in the projectDirectory
            listing.</description>
        <echo message="${echo.separator}"/>
        <echo message="Checking regular references..."/>
        <echo message="${echo.separator}"/>
        <java classname="net.sf.saxon.Transform" classpath="utilities/saxon9he.jar" fork="true">
            <jvmarg value="-Xmx1024m"/>
            <arg value="-s:xsl/check_external_refs.xsl"/>
            <arg value="-xsl:xsl/check_external_refs.xsl"/>
            <arg value="-o:${outputDir}/errors.xml"/>
            <arg value="projectDirectory=${projectDirFull}"/>
            <arg value="outputDir=${outputDir}"/>
            <arg value="line.separator=${line.separator}"/>
            <arg value="suffix=${suffix}"/>
            <arg value="exceptionsDoc=${exceptionsDoc}"/>
            <arg value="--suppressXsltNamespaceCheck:on"/>
        </java>
    </target>
    
    <target name="compileAllErrors" depends="setup">
        <java classname="net.sf.saxon.Transform" classpath="utilities/saxon9he.jar" fork="true">
            <jvmarg value="-Xmx4000m"/>
            <arg value="-s:xsl/compile_errors.xsl"/>
            <arg value="-xsl:xsl/compile_errors.xsl"/>
            <arg value="-o:${outputDir}/html_diagnostics_report.html"/>
            <arg value="projectDirectory=${projectDirFull}"/>
            <arg value="outputDir=${outputDir}"/>
            <arg value="line.separator=${line.separator}"/>
            <arg value="suffix=${suffix}"/>
            <!--Special param for this XSLT-->
            <arg value="byDoc=${byDoc}"/>
            <arg value="--suppressXsltNamespaceCheck:on"/>
        </java>
    </target>
    
    
    <!--Currently doesn't work-->
    <target name="open" depends="open.if.windows, open.if.unix">
        
        <open file="${diagnosticsFile}"/>
    </target>
    
    <target name="open.if.windows" if="${isWindows}" depends="setup">
        
        <property name="diagnosticsFile" value="${outputDir}\html_diagnostics_report.html"/>
        <echo message="Opening ${diagnosticsFile}"/>
    </target>
    
    <target name="open.if.unix" if="${isUnix}" depends="setup">
        <property name="diagnosticsFile" value="${outputDir}/html_diagnostics_report.html"/>
        <echo message="Opening ${diagnosticsFile}"/>
    </target>
    
    

    
    
    <target name="all" depends="setup, clean, createSystemXml, index, checkInternal, checkRefs, compileAllErrors"/>
   
    

    
</project>